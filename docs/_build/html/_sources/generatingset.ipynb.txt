{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "# Locate the script in UnifiedInflation/examples and add to path one folder before, that is, UnifiedInflation/\n",
    "# in order to be able to import quantuminflation\n",
    "# ! Note: I found online that \"__file__\" sometimes can be problematic, So I'm using the solution provided in\n",
    "# https://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python?lq=1\n",
    "from inspect import getsourcefile\n",
    "from os.path import abspath\n",
    "from tabnanny import verbose\n",
    "\n",
    "#cws = abspath(getsourcefile(lambda:0))\n",
    "cws = abspath(getsourcefile(lambda:0)); cws\n",
    "cws = os.getcwd(); cws\n",
    "cws = os.sep.join(cws.split(os.sep)[:-1])  # Remove the script filename to get the directory of the script\n",
    "sys.path.append(cws)\n",
    "\n",
    "import itertools\n",
    "import pickle\n",
    "\n",
    "import numpy as np\n",
    "from quantuminflation.InflationProblem import InflationProblem\n",
    "from quantuminflation.InflationSDP import InflationSDP\n",
    "from quantuminflation.useful_distributions import *\n",
    "from quantuminflation.general_tools import to_numbers\n",
    "\n",
    "from quantuminflation.fast_npa import calculate_momentmatrix\n",
    "import itertools\n",
    "\n",
    "from ncpol2sdpa.nc_utils import flatten, apply_substitutions\n",
    "import sympy as sp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to customize the generating set\n",
    "\n",
    "In this tutorial we will showcase how to customize the generating set of monomials.\n",
    "\n",
    "We can use the built-in functions to construct a generating set according to several hierarchies. To showcase this, let us first look at a simple scenario of only two parties, Alice and Bob, sharing a quantum state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\eboghiu\\OneDrive - ICFO\\Documents\\Code\\inflation\\quantuminflation\\InflationProblem.py:49: UserWarning: Inflation level per source must be a non-empty list. Defaulting to 1 (standard NPA).\n",
      "  warn(\"Inflation level per source must be a non-empty list. Defaulting to 1 (standard NPA).\")\n"
     ]
    }
   ],
   "source": [
    "InfProb = InflationProblem(dag= {\"h1\": [\"v1\", \"v2\"]},\n",
    "                           outcomes_per_party=[2, 2],\n",
    "                           settings_per_party=[2, 2])\n",
    "InfSDP = InflationSDP(InfProb, commuting=False, verbose=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are all the measurement operators:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[A_1_0_0, A_1_1_0, B_1_0_0, B_1_1_0]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meas = InfSDP.measurements\n",
    "flatten(meas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a reminder, the indices are interpreted as follows: the last two give the measurement setting and measurement output, and the rest represent on which copy of the source the operator is acting. For example, `A_1_1_0` represents the projection onto copy 1 of source 1 with measurement setting $x=1$ and measurement outcome $a=0$.\n",
    "\n",
    "Now let us look at a few examples of hierarchies. The first is the NPA levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'One' object is not iterable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_22192/4063781627.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mInfSDP\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbuild_columns\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcolumn_specification\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'local2'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mInfSDP\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerating_monomials_sym\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mInfSDP\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerate_relaxation\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcolumn_specification\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mInfSDP\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerating_monomials_sym\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mc:\\Users\\eboghiu\\OneDrive - ICFO\\Documents\\Code\\inflation\\quantuminflation\\InflationSDP.py\u001b[0m in \u001b[0;36mgenerate_relaxation\u001b[1;34m(self, column_specification, max_monomial_length, parallel, sandwich_positivity, use_numba)\u001b[0m\n\u001b[0;32m    218\u001b[0m         \u001b[1;31m#  in self.generating_monomials.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    219\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfilename_label\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfilename_label\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 220\u001b[1;33m         self.build_columns(column_specification,\n\u001b[0m\u001b[0;32m    221\u001b[0m                            max_monomial_length=max_monomial_length)\n\u001b[0;32m    222\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\eboghiu\\OneDrive - ICFO\\Documents\\Code\\inflation\\quantuminflation\\InflationSDP.py\u001b[0m in \u001b[0;36mbuild_columns\u001b[1;34m(self, column_specification, max_monomial_length)\u001b[0m\n\u001b[0;32m    825\u001b[0m                     \u001b[0mcol_specs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcolumn_specification\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    826\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 827\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_build_cols_from_col_specs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcol_specs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    828\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    829\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\eboghiu\\OneDrive - ICFO\\Documents\\Code\\inflation\\quantuminflation\\InflationSDP.py\u001b[0m in \u001b[0;36m_build_cols_from_col_specs\u001b[1;34m(self, col_specs)\u001b[0m\n\u001b[0;32m    994\u001b[0m                 \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    995\u001b[0m                     \u001b[0mmeas_ops\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 996\u001b[1;33m                     \u001b[1;32mfor\u001b[0m \u001b[0mparty\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mblock\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    997\u001b[0m                         \u001b[0mmeas_ops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mflatten\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmeasurements\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mparty\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    998\u001b[0m                     \u001b[1;32mfor\u001b[0m \u001b[0mslicee\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mitertools\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mproduct\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mmeas_ops\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'One' object is not iterable"
     ]
    }
   ],
   "source": [
    "InfSDP.build_columns(column_specification='local2')\n",
    "InfSDP.generating_monomials_sym\n",
    "InfSDP.generate_relaxation(column_specification=InfSDP.generating_monomials_sym)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " A_1_0_0,\n",
       " A_1_1_0,\n",
       " B_1_0_0,\n",
       " B_1_1_0,\n",
       " A_1_0_0*A_1_1_0,\n",
       " A_1_1_0*A_1_0_0,\n",
       " A_1_0_0*B_1_0_0,\n",
       " A_1_0_0*B_1_1_0,\n",
       " A_1_1_0*B_1_0_0,\n",
       " A_1_1_0*B_1_1_0,\n",
       " B_1_0_0*B_1_1_0,\n",
       " B_1_1_0*B_1_0_0,\n",
       " A_1_0_0*A_1_1_0*B_1_0_0,\n",
       " A_1_0_0*A_1_1_0*B_1_1_0,\n",
       " A_1_1_0*A_1_0_0*B_1_0_0,\n",
       " A_1_1_0*A_1_0_0*B_1_1_0,\n",
       " A_1_0_0*B_1_0_0*B_1_1_0,\n",
       " A_1_0_0*B_1_1_0*B_1_0_0,\n",
       " A_1_1_0*B_1_0_0*B_1_1_0,\n",
       " A_1_1_0*B_1_1_0*B_1_0_0,\n",
       " A_1_0_0*A_1_1_0*B_1_0_0*B_1_1_0,\n",
       " A_1_0_0*A_1_1_0*B_1_1_0*B_1_0_0,\n",
       " A_1_1_0*A_1_0_0*B_1_0_0*B_1_1_0,\n",
       " A_1_1_0*A_1_0_0*B_1_1_0*B_1_0_0]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "InfSDP.generating_monomials_sym"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "5185cb8988fc84c35117c94793cda6c5f0bb6718bc4f8ace0826abbce28c3e20"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
