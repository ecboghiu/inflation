{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The package implementation follows an object-oriented design. There are two main objects that need to be understood.\n",
    "\n",
    "## Encoding the causal scenario\n",
    "\n",
    "The first object of interest is `InflationProblem`. When instantiating this object, we pass it all the relevant information about the causal scenario and the type of inflation we want to perform.\n",
    "\n",
    "Causal relationships are encoded through a Bayesian Directed-Acyclic-Graph, or DAG, for short. The nodes of the graph represent random variables, which can be either observable or unobservable. Directed arrows between the nodes encode direct causal influence between one node and another. The acyclicity of the graph avoids the existence of causal loops. \n",
    "\n",
    "For applications to physics, another class of random variables is often considered, called \"settings\". These correspond to observable variables on whose outcome we condition in order to obtain the observed data. In a physics setting, this could correspond to measuring one property of a system or another.\n",
    "\n",
    "For a simple causal scenario in physics, consider the so called [\"bilocal scenario\"](https://journals.aps.org/pra/abstract/10.1103/PhysRevA.85.032119):\n",
    "\n",
    "<img src=\"./figures/bilocal.PNG\" alt=\"drawing\" width=\"400\"/>\n",
    "\n",
    "Here we have three observed random variables, $A$, $B$ and $C$, two hidden quantum variables $U_{AB}$ and $U_{B'C}$ and three setting variables, $X$, $Y$ and $Z$.\n",
    "\n",
    "After importing the package, we encode information about the causal scenario into `InflationProblem` as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from causalinflation import InflationProblem\n",
    "\n",
    "InfProb = InflationProblem( dag={\"h1\": [\"v1\", \"v2\"],\n",
    "                                 \"h2\": [\"v2\", \"v3\"]},\n",
    "                            outcomes_per_party=[2, 2, 2],\n",
    "                            settings_per_party=[2, 2, 2],\n",
    "                            inflation_level_per_source=[2, 2],\n",
    "                            names=['A', 'B', 'C'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DAG is encoded through a dictionary where directed arrows are encoded as keys in the dictionary pointing to all nodes stored in the value of the key. In `outcomes_per_party` and `settings_per_party` we specify the cardinalities of the observable nodes and measurement settings respectively. We can optionally specify other party names in `names`; the default is alphabetical. The paremeter `inflation_level_per_source` determines how many copies of the quantum sources we consider in the inflated graph. See [Physical Review X 11.2 (2021): 021043](https://journals.aps.org/prx/abstract/10.1103/PhysRevX.11.021043) for more information about quantum inflation.\n",
    "\n",
    "## Generating the SDP relaxation\n",
    "\n",
    "The next object of interest is `InflationSDP`. It is an object that takes as input an instance of `InflationProblem`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from causalinflation import InflationSDP\n",
    "\n",
    "InfSDP = InflationSDP(InfProb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first main method, `generate_relaxation()` is that which generates the SDP relaxation of the chosen inflation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "InfSDP.generate_relaxation(column_specification='npa1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above example, we have chosen \"NPA hierarchy level 1\". For the meaning of these levels, see [New Journal of Physics 10.7 (2008): 073013](https://iopscience.iop.org/article/10.1088/1367-2630/10/7/073013/meta). For other hierarchies that we support, see the documentation of `generate_relaxation()`. What is important to know is that the higher the hierarchy level, the tighter are the "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    " There are three steps to generate the relaxation:\n",
    "\n",
    "Instantiate the SdpRelaxation object.\n",
    "Get the relaxation.\n",
    "Write the relaxation to a file or solve the problem.\n",
    "The second step is the most time consuming, often running for hours as the number of variables increases. Once the solution is obtained, it can be studied further with some helper functions.\n",
    "\n",
    "To instantiate the SdpRelaxation object, you need to specify the variables. You can use any SymPy symbolic variable, as long as the adjoint operator is well-defined. The library also has helper functions to generate commutative or noncommutative variables or operators.\n",
    "\n",
    "Getting the relaxation requires at least the level of relaxation, and the matching method, SdpRelaxation.get_relaxation, will generate the moment matrix. Additional elements of the problem, such as the objective function, inequalities, equalities, and constraints on the moments.\n",
    "\n",
    "The last step in is to either solve or export the relaxation. The function solve_sdp or the class method SdpRelaxation.solve autodetects the possible solvers: SDPA, MOSEK, and CVXOPT. Alternatively, the method write_to_file exports the file to sparse SDPA format, which can be solved externally on a supercomputer, in MATLAB, or by any other means that accepts this input format."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "00a39c23cf09218597099894b042ffa9fa6ee7ec336d8d61c9bbb23befd995be"
  },
  "kernelspec": {
   "display_name": "Python 3.8.5 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
